{"remainingRequest":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/src/components/admin/GaiaSettings.vue?vue&type=template&id=091c7825&","dependencies":[{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/src/components/admin/GaiaSettings.vue","mtime":1543936658761},{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"col-sm-10\" }, [\n    _c(\"form\", { staticClass: \"form-horizontal\" }, [\n      _vm._v(\"\\n  \" + _vm._s(_vm.result) + \"\\n  \"),\n      _vm.errors.length\n        ? _c(\"p\", { key: _vm.errors.length }, [\n            _c(\"b\", [_vm._v(\"Please correct the following error(s):\")]),\n            _c(\n              \"ul\",\n              _vm._l(_vm.errors, function(error, index) {\n                return _c(\"li\", { key: index, attrs: { error: error } }, [\n                  _vm._v(_vm._s(error))\n                ])\n              })\n            )\n          ])\n        : _vm._e(),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"Title\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.configSecret,\n              expression: \"config.configSecret\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: {\n            type: \"password\",\n            placeholder: \"Your gaia hub config secret?\"\n          },\n          domProps: { value: _vm.config.configSecret },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(_vm.config, \"configSecret\", $event.target.value)\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"Server Name\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.serverName,\n              expression: \"config.serverName\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"Server name\" },\n          domProps: { value: _vm.config.serverName },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(_vm.config, \"serverName\", $event.target.value)\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"port\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.port,\n              expression: \"config.port\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"port\" },\n          domProps: { value: _vm.config.port },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(_vm.config, \"port\", $event.target.value)\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"driver\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.driver,\n              expression: \"config.driver\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"driver\" },\n          domProps: { value: _vm.config.driver },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(_vm.config, \"driver\", $event.target.value)\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"bucket\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.bucket,\n              expression: \"config.bucket\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"bucket\" },\n          domProps: { value: _vm.config.bucket },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(_vm.config, \"bucket\", $event.target.value)\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"readUrl\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.readUrl,\n              expression: \"config.readUrl\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"readUrl\" },\n          domProps: { value: _vm.config.readUrl },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(_vm.config, \"readUrl\", $event.target.value)\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"accessKeyId\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.credentials.accessKeyId,\n              expression: \"config.credentials.accessKeyId\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"accessKeyId\" },\n          domProps: { value: _vm.config.credentials.accessKeyId },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(\n                _vm.config.credentials,\n                \"accessKeyId\",\n                $event.target.value\n              )\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"secretAccessKey\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.credentials.secretAccessKey,\n              expression: \"config.credentials.secretAccessKey\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"secretAccessKey\" },\n          domProps: { value: _vm.config.credentials.secretAccessKey },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(\n                _vm.config.credentials,\n                \"secretAccessKey\",\n                $event.target.value\n              )\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"proofsRequired\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.proofs.proofsRequired,\n              expression: \"config.proofs.proofsRequired\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"proofsRequired\" },\n          domProps: { value: _vm.config.proofs.proofsRequired },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(_vm.config.proofs, \"proofsRequired\", $event.target.value)\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\"label\", [_vm._v(\"proofsRequired\")]),\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.argsTransport.level,\n              expression: \"config.argsTransport.level\"\n            }\n          ],\n          staticClass: \"form-control\",\n          attrs: { type: \"text\", placeholder: \"proofsRequired\" },\n          domProps: { value: _vm.config.argsTransport.level },\n          on: {\n            input: function($event) {\n              if ($event.target.composing) {\n                return\n              }\n              _vm.$set(_vm.config.argsTransport, \"level\", $event.target.value)\n            }\n          }\n        })\n      ]),\n      _c(\"div\", { staticClass: \"form-check\" }, [\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.argsTransport.handleExceptions,\n              expression: \"config.argsTransport.handleExceptions\"\n            }\n          ],\n          staticClass: \"form-check-input\",\n          attrs: { type: \"checkbox\", id: \"handleExceptions\" },\n          domProps: {\n            checked: Array.isArray(_vm.config.argsTransport.handleExceptions)\n              ? _vm._i(_vm.config.argsTransport.handleExceptions, null) > -1\n              : _vm.config.argsTransport.handleExceptions\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.config.argsTransport.handleExceptions,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"handleExceptions\",\n                      $$a.concat([$$v])\n                    )\n                } else {\n                  $$i > -1 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"handleExceptions\",\n                      $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                    )\n                }\n              } else {\n                _vm.$set(_vm.config.argsTransport, \"handleExceptions\", $$c)\n              }\n            }\n          }\n        }),\n        _c(\n          \"label\",\n          {\n            staticClass: \"form-check-label\",\n            attrs: { for: \"handleExceptions\" }\n          },\n          [_vm._v(\"handleExceptions\")]\n        )\n      ]),\n      _c(\"div\", { staticClass: \"form-check\" }, [\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.argsTransport.stringify,\n              expression: \"config.argsTransport.stringify\"\n            }\n          ],\n          staticClass: \"form-check-input\",\n          attrs: { type: \"checkbox\", id: \"stringify\" },\n          domProps: {\n            checked: Array.isArray(_vm.config.argsTransport.stringify)\n              ? _vm._i(_vm.config.argsTransport.stringify, null) > -1\n              : _vm.config.argsTransport.stringify\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.config.argsTransport.stringify,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"stringify\",\n                      $$a.concat([$$v])\n                    )\n                } else {\n                  $$i > -1 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"stringify\",\n                      $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                    )\n                }\n              } else {\n                _vm.$set(_vm.config.argsTransport, \"stringify\", $$c)\n              }\n            }\n          }\n        }),\n        _c(\n          \"label\",\n          { staticClass: \"form-check-label\", attrs: { for: \"stringify\" } },\n          [_vm._v(\"stringify\")]\n        )\n      ]),\n      _c(\"div\", { staticClass: \"form-check\" }, [\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.argsTransport.timestamp,\n              expression: \"config.argsTransport.timestamp\"\n            }\n          ],\n          staticClass: \"form-check-input\",\n          attrs: { type: \"checkbox\", id: \"timestamp\" },\n          domProps: {\n            checked: Array.isArray(_vm.config.argsTransport.timestamp)\n              ? _vm._i(_vm.config.argsTransport.timestamp, null) > -1\n              : _vm.config.argsTransport.timestamp\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.config.argsTransport.timestamp,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"timestamp\",\n                      $$a.concat([$$v])\n                    )\n                } else {\n                  $$i > -1 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"timestamp\",\n                      $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                    )\n                }\n              } else {\n                _vm.$set(_vm.config.argsTransport, \"timestamp\", $$c)\n              }\n            }\n          }\n        }),\n        _c(\n          \"label\",\n          { staticClass: \"form-check-label\", attrs: { for: \"timestamp\" } },\n          [_vm._v(\"timestamp\")]\n        )\n      ]),\n      _c(\"div\", { staticClass: \"form-check\" }, [\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.argsTransport.colorize,\n              expression: \"config.argsTransport.colorize\"\n            }\n          ],\n          staticClass: \"form-check-input\",\n          attrs: { type: \"checkbox\", id: \"colorize\" },\n          domProps: {\n            checked: Array.isArray(_vm.config.argsTransport.colorize)\n              ? _vm._i(_vm.config.argsTransport.colorize, null) > -1\n              : _vm.config.argsTransport.colorize\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.config.argsTransport.colorize,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"colorize\",\n                      $$a.concat([$$v])\n                    )\n                } else {\n                  $$i > -1 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"colorize\",\n                      $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                    )\n                }\n              } else {\n                _vm.$set(_vm.config.argsTransport, \"colorize\", $$c)\n              }\n            }\n          }\n        }),\n        _c(\n          \"label\",\n          { staticClass: \"form-check-label\", attrs: { for: \"colorize\" } },\n          [_vm._v(\"colorize\")]\n        )\n      ]),\n      _c(\"div\", { staticClass: \"form-check\" }, [\n        _c(\"input\", {\n          directives: [\n            {\n              name: \"model\",\n              rawName: \"v-model\",\n              value: _vm.config.argsTransport.json,\n              expression: \"config.argsTransport.json\"\n            }\n          ],\n          staticClass: \"form-check-input\",\n          attrs: { type: \"checkbox\", id: \"json\" },\n          domProps: {\n            checked: Array.isArray(_vm.config.argsTransport.json)\n              ? _vm._i(_vm.config.argsTransport.json, null) > -1\n              : _vm.config.argsTransport.json\n          },\n          on: {\n            change: function($event) {\n              var $$a = _vm.config.argsTransport.json,\n                $$el = $event.target,\n                $$c = $$el.checked ? true : false\n              if (Array.isArray($$a)) {\n                var $$v = null,\n                  $$i = _vm._i($$a, $$v)\n                if ($$el.checked) {\n                  $$i < 0 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"json\",\n                      $$a.concat([$$v])\n                    )\n                } else {\n                  $$i > -1 &&\n                    _vm.$set(\n                      _vm.config.argsTransport,\n                      \"json\",\n                      $$a.slice(0, $$i).concat($$a.slice($$i + 1))\n                    )\n                }\n              } else {\n                _vm.$set(_vm.config.argsTransport, \"json\", $$c)\n              }\n            }\n          }\n        }),\n        _c(\n          \"label\",\n          { staticClass: \"form-check-label\", attrs: { for: \"json\" } },\n          [_vm._v(\"json\")]\n        )\n      ]),\n      _c(\"div\", { staticClass: \"form-group\" }, [\n        _c(\n          \"button\",\n          {\n            staticClass: \"btn btn-primary\",\n            attrs: { type: \"submit\" },\n            on: {\n              click: function($event) {\n                $event.preventDefault()\n                return _vm.gaiaHubConfig($event)\n              }\n            }\n          },\n          [_vm._v(\"Submit\")]\n        )\n      ])\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}
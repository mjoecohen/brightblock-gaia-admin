{"remainingRequest":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/src/layout/MainNavbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/src/layout/MainNavbar.vue","mtime":1543940034978},{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/mikey/hubgit/brightblock/brightblock-gaia-admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nlet resizeTimeout;\nfunction resizeThrottler(actualResizeHandler) {\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\n  if (!resizeTimeout) {\n    resizeTimeout = setTimeout(() => {\n      resizeTimeout = null;\n      actualResizeHandler();\n\n      // The actualResizeHandler will execute at a rate of 15fps\n    }, 66);\n  }\n}\n\nimport MobileMenu from \"@/layout/MobileMenu\";\nimport myAccountService from \"@/services/myAccountService\";\n\nexport default {\n  components: {\n    MobileMenu\n  },\n  props: {\n    type: {\n      type: String,\n      default: \"white\",\n      validator(value) {\n        return [\n          \"white\",\n          \"default\",\n          \"primary\",\n          \"danger\",\n          \"success\",\n          \"warning\",\n          \"info\"\n        ].includes(value);\n      }\n    },\n    colorOnScroll: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      extraNavClasses: \"\",\n      toggledClass: false\n    };\n  },\n  computed: {\n    showDownload() {\n      const excludedRoutes = [\"login\", \"landing\", \"profile\"];\n      return excludedRoutes.every(r => r !== this.$route.name);\n    },\n    showAdmin() {\n      return this.$store.state.myAccountStore.myProfile.showAdmin;\n    },\n    username() {\n      return this.$store.state.myAccountStore.myProfile.name;\n    },\n    avatar() {\n      let myProfile = this.$store.getters[\"myAccountStore/getMyProfile\"];\n      if (myProfile.loggedIn) {\n        return (\n          '<img style=\"width: 40px; height: 40px; border-radius: 20px;\" src=\"' +\n          myProfile.avatarUrl +\n          '\"/>'\n        );\n      } else {\n        return '<span class=\"icon-user\"></span>';\n      }\n    },\n    loggedIn() {\n      let myProfile = this.$store.getters[\"myAccountStore/getMyProfile\"];\n      return myProfile.loggedIn;\n    }\n  },\n  methods: {\n    bodyClick() {\n      let bodyClick = document.getElementById(\"bodyClick\");\n\n      if (bodyClick === null) {\n        let body = document.querySelector(\"body\");\n        let elem = document.createElement(\"div\");\n        elem.setAttribute(\"id\", \"bodyClick\");\n        body.appendChild(elem);\n\n        let bodyClick = document.getElementById(\"bodyClick\");\n        bodyClick.addEventListener(\"click\", this.toggleNavbarMobile);\n      } else {\n        bodyClick.remove();\n      }\n    },\n    toggleNavbarMobile() {\n      this.NavbarStore.showNavbar = !this.NavbarStore.showNavbar;\n      this.toggledClass = !this.toggledClass;\n      this.bodyClick();\n    },\n    handleScroll() {\n      let scrollValue =\n        document.body.scrollTop || document.documentElement.scrollTop;\n      let navbarColor = document.getElementById(\"toolbar\");\n      this.currentScrollValue = scrollValue;\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\n        this.extraNavClasses = `md-${this.type}`;\n        navbarColor.classList.remove(\"md-transparent\");\n      } else {\n        if (this.extraNavClasses) {\n          this.extraNavClasses = \"\";\n          navbarColor.classList.add(\"md-transparent\");\n        }\n      }\n    },\n    scrollListener() {\n      resizeThrottler(this.handleScroll);\n    },\n    scrollToElement() {\n      let element_id = document.getElementById(\"downloadSection\");\n      if (element_id) {\n        element_id.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n      }\n    },\n    logout() {\n      localStorage.clear();\n      sessionStorage.clear();\n      myAccountService.logout();\n    }\n  },\n  mounted() {\n    document.addEventListener(\"scroll\", this.scrollListener);\n  },\n  beforeDestroy() {\n    document.removeEventListener(\"scroll\", this.scrollListener);\n  }\n};\n",{"version":3,"sources":["MainNavbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MainNavbar.vue","sourceRoot":"src/layout","sourcesContent":["<template>\n  <md-toolbar\n    id=\"toolbar\"\n    md-elevation=\"0\"\n    class=\"md-primary md-absolute\"\n    :class=\"extraNavClasses\"\n    :color-on-scroll=\"colorOnScroll\"\n  >\n    <div class=\"md-toolbar-row md-collapse-lateral\">\n      <div class=\"md-toolbar-section-start\">\n        <h3 class=\"md-title\">\n          <router-link to=\"/\" style=\"color: white;\">Open Artem</router-link>\n        </h3>\n      </div>\n      <div class=\"md-toolbar-section-end\">\n        <md-button\n          class=\"md-just-icon md-simple md-toolbar-toggle\"\n          :class=\"{ toggled: toggledClass }\"\n          @click=\"toggleNavbarMobile()\"\n        >\n          <span class=\"icon-bar\"></span> <span class=\"icon-bar\"></span>\n          <span class=\"icon-bar\"></span>\n        </md-button>\n\n        <div class=\"md-collapse\">\n          <div class=\"md-collapse-wrapper\">\n            <mobile-menu nav-mobile-section-start=\"false\">\n              <!-- Here you can add your items from the section-start of your toolbar -->\n            </mobile-menu>\n            <md-list>\n              <li class=\"md-list-item\" v-if=\"loggedIn\">\n                <a\n                  href=\"javascript:void(0)\"\n                  class=\"md-list-item-router md-list-item-container md-button-clean dropdown\"\n                >\n                  <div class=\"md-list-item-content\">\n                    <drop-down direction=\"down\">\n                      <md-button\n                        slot=\"title\"\n                        class=\"md-button md-button-link md-white md-simple dropdown-toggle\"\n                        data-toggle=\"dropdown\"\n                      >\n                        <p><span v-html=\"avatar\"></span></p>\n                      </md-button>\n                      <ul class=\"dropdown-menu dropdown-with-icons\">\n                        <li>\n                          <i class=\"material-icons\">verified_user</i>\n                          <p>{{ username }}</p>\n                        </li>\n                        <li>\n                          <router-link\n                            class=\"dropdown-item\"\n                            to=\"/admin/registrations\"\n                            v-if=\"showAdmin\"\n                            >Admin</router-link\n                          >\n                        </li>\n                        <li>\n                          <router-link\n                            class=\"dropdown-item\"\n                            to=\"/account/userData\"\n                            ><i class=\"material-icons\">account_circle</i> My\n                            Account</router-link\n                          >\n                        </li>\n                        <li>\n                          <a\n                            href=\"#\"\n                            class=\"dropdown-item\"\n                            @click.prevent=\"logout\"\n                            ><i class=\"material-icons\">fingerprint</i> Logout</a\n                          >\n                        </li>\n                      </ul>\n                    </drop-down>\n                  </div>\n                </a>\n              </li>\n              <md-list-item href=\"#/login\" v-else>\n                <i class=\"material-icons\">fingerprint</i>\n                <p>Login</p>\n              </md-list-item>\n            </md-list>\n          </div>\n        </div>\n      </div>\n    </div>\n  </md-toolbar>\n</template>\n\n<script>\nlet resizeTimeout;\nfunction resizeThrottler(actualResizeHandler) {\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\n  if (!resizeTimeout) {\n    resizeTimeout = setTimeout(() => {\n      resizeTimeout = null;\n      actualResizeHandler();\n\n      // The actualResizeHandler will execute at a rate of 15fps\n    }, 66);\n  }\n}\n\nimport MobileMenu from \"@/layout/MobileMenu\";\nimport myAccountService from \"@/services/myAccountService\";\n\nexport default {\n  components: {\n    MobileMenu\n  },\n  props: {\n    type: {\n      type: String,\n      default: \"white\",\n      validator(value) {\n        return [\n          \"white\",\n          \"default\",\n          \"primary\",\n          \"danger\",\n          \"success\",\n          \"warning\",\n          \"info\"\n        ].includes(value);\n      }\n    },\n    colorOnScroll: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      extraNavClasses: \"\",\n      toggledClass: false\n    };\n  },\n  computed: {\n    showDownload() {\n      const excludedRoutes = [\"login\", \"landing\", \"profile\"];\n      return excludedRoutes.every(r => r !== this.$route.name);\n    },\n    showAdmin() {\n      return this.$store.state.myAccountStore.myProfile.showAdmin;\n    },\n    username() {\n      return this.$store.state.myAccountStore.myProfile.name;\n    },\n    avatar() {\n      let myProfile = this.$store.getters[\"myAccountStore/getMyProfile\"];\n      if (myProfile.loggedIn) {\n        return (\n          '<img style=\"width: 40px; height: 40px; border-radius: 20px;\" src=\"' +\n          myProfile.avatarUrl +\n          '\"/>'\n        );\n      } else {\n        return '<span class=\"icon-user\"></span>';\n      }\n    },\n    loggedIn() {\n      let myProfile = this.$store.getters[\"myAccountStore/getMyProfile\"];\n      return myProfile.loggedIn;\n    }\n  },\n  methods: {\n    bodyClick() {\n      let bodyClick = document.getElementById(\"bodyClick\");\n\n      if (bodyClick === null) {\n        let body = document.querySelector(\"body\");\n        let elem = document.createElement(\"div\");\n        elem.setAttribute(\"id\", \"bodyClick\");\n        body.appendChild(elem);\n\n        let bodyClick = document.getElementById(\"bodyClick\");\n        bodyClick.addEventListener(\"click\", this.toggleNavbarMobile);\n      } else {\n        bodyClick.remove();\n      }\n    },\n    toggleNavbarMobile() {\n      this.NavbarStore.showNavbar = !this.NavbarStore.showNavbar;\n      this.toggledClass = !this.toggledClass;\n      this.bodyClick();\n    },\n    handleScroll() {\n      let scrollValue =\n        document.body.scrollTop || document.documentElement.scrollTop;\n      let navbarColor = document.getElementById(\"toolbar\");\n      this.currentScrollValue = scrollValue;\n      if (this.colorOnScroll > 0 && scrollValue > this.colorOnScroll) {\n        this.extraNavClasses = `md-${this.type}`;\n        navbarColor.classList.remove(\"md-transparent\");\n      } else {\n        if (this.extraNavClasses) {\n          this.extraNavClasses = \"\";\n          navbarColor.classList.add(\"md-transparent\");\n        }\n      }\n    },\n    scrollListener() {\n      resizeThrottler(this.handleScroll);\n    },\n    scrollToElement() {\n      let element_id = document.getElementById(\"downloadSection\");\n      if (element_id) {\n        element_id.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\n      }\n    },\n    logout() {\n      localStorage.clear();\n      sessionStorage.clear();\n      myAccountService.logout();\n    }\n  },\n  mounted() {\n    document.addEventListener(\"scroll\", this.scrollListener);\n  },\n  beforeDestroy() {\n    document.removeEventListener(\"scroll\", this.scrollListener);\n  }\n};\n</script>\n"]}]}